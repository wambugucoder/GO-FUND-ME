version: '3'
services:
    server:
        build: .
        ports:
          - 8443:8443
        links:
          - database
          - redis
          - grafana
          - prometheus
          - zookeeper
          - kafka
          - sonaqube

        restart: always
        networks:
          - backend-server 
  
   database:
        image: postgres:alpine
        environment:
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
            POSTGRES_DB: bus-test
        healthcheck:
            test: ['CMD-SHELL', 'pg_is ready -U postgres']
            interval: 10s
            timeout: 5s
            retries: 5
        restart: always
        volumes: 
            - ../data/pg-data:/var/libs/postgresql/data
        ports: 
            - 5432:5432
        networks:
            - backend-server
            
    redis:
        image: redis:alpine
        hostname: redis
        restart: always
        volumes: 
            - ../data/redis:/data
        entrypoint: redis-server --appendonly yes
        ports: 
            - 6379:6379
        networks:
            - backend-server

    prometheus:
        image: prom/prometheus
        ports:
            - "9090:9090"
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        hostname: prometheus
        networks:
            - backend-server
        
    grafana:
        image: grafana/grafana
        depends_on:
            - prometheus
        ports:
            - "3000:3000"
        hostname: grafana
        networks:
            - backend-server
    
   sonarqube:
     image: sonarqube:7.5-community # Matches version of https://sonar.smogdev.co.uk/
     ports:
       - "9000:9000"
     networks:
       - sonarnet
     environment:
       - sonar.jdbc.url=jdbc:postgresql://db:5432/sonar
     volumes:
       - sonarqube_conf:/opt/sonarqube/conf
       - sonarqube_data:/opt/sonarqube/data
       - sonarqube_extensions:/opt/sonarqube/extensions
      networks:
            - backend-server

  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - "2181"
    networks:
            - backend-server
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://192.168.99.100:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:SASL_PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka
    networks:
            - backend-server

  
       

